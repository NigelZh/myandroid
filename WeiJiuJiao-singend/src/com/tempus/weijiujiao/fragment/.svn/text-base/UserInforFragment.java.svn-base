package com.tempus.weijiujiao.fragment;

import org.json.JSONException;

import com.nostra13.universalimageloader.core.listener.SimpleImageLoadingListener;
import com.tempus.weijiujiao.DetailActivity;
import com.tempus.weijiujiao.MyApplication;
import com.tempus.weijiujiao.R;
import com.tempus.weijiujiao.HTTP.ParserResult;
import com.tempus.weijiujiao.HTTP.Result;
import com.tempus.weijiujiao.HTTP.Service;
import com.tempus.weijiujiao.HTTP.onResultListener;
import com.tempus.weijiujiao.Utils.BitmapUtils;
import com.tempus.weijiujiao.Utils.Debug;
import com.tempus.weijiujiao.Utils.JsonParser;
import com.tempus.weijiujiao.Utils.StringUtils;
import com.tempus.weijiujiao.Utils.ToastUtils;
import com.tempus.weijiujiao.adapter.UserInforListViewAdapter;
import com.tempus.weijiujiao.bean.User;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.ViewFlipper;
import android.widget.AdapterView.OnItemClickListener;

/**
 * 用户信息
 * 
 * @author lenovo
 * 
 */
public class UserInforFragment extends Fragment {
	private int currnetIndex = 0;
	private LayoutInflater inflater;
	private ListView lv_setup;
	private String frontTitle, frontAndUpTitle = null;
	private ViewFlipper viewFlipper = null;
	private DetailActivity aActivity;
	private User user;
	private LinearLayout userLinearLayout;
	private EditText ed_old, ed_new, ed_checkNew;
	private TextView nickName, gradevin_num, winecellar_num;
	private ImageView userPic;
	private Button btn_confirm, userQuit;
	private String newstr = null;
	private UserInforListViewAdapter userInforAdapte;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		this.inflater = inflater;
		aActivity = (DetailActivity) getActivity();
		frontAndUpTitle = aActivity.getActivityTitle();
		viewFlipper = (ViewFlipper) inflater.inflate(
				R.layout.user_infor_layout, null);
		initView();
		return viewFlipper;
	}

	private void initView() {
		getUserinfor();
		userInforAdapte = new UserInforListViewAdapter(inflater, user);
		nickName = (TextView) viewFlipper
				.findViewById(R.id.tv_user_infor_user_nickname);
		gradevin_num = (TextView) viewFlipper
				.findViewById(R.id.tv_user_infor_user__gradevin_num);
		if (!StringUtils.isNull(user.getGravidenCount() + "")) {
			gradevin_num.setText(user.getGravidenCount() + "");
		}
		winecellar_num = (TextView) viewFlipper
				.findViewById(R.id.tv_user_infor_user__winecellar_num);
		if (!StringUtils.isNull(user.getWinecallerCount() + "")) {
			winecellar_num.setText(user.getWinecallerCount() + "");
		}
		userPic = (ImageView) viewFlipper
				.findViewById(R.id.iv_user_infor_user_pic);
		if (user.getUserImagerURL() != null
				&& !user.getUserImagerURL().equals("")) {
			MyApplication
					.getinstance()
					.getImageLoader()
					.loadImage(user.getUserImagerURL(),
							new SimpleImageLoadingListener() {

								@SuppressWarnings("deprecation")
								@Override
								public void onLoadingComplete(String arg0,
										View arg1, Bitmap arg2) {
									userPic.setBackgroundDrawable(new BitmapDrawable(
											arg2));
								}
							});
		}
		userLinearLayout = (LinearLayout) viewFlipper
				.findViewById(R.id.ll_user_infor_changerpic);
		userLinearLayout.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				UpdateDeviceImage();
			}
		});
		nickName.setText(user.getUserName());
		lv_setup = (ListView) viewFlipper.findViewById(R.id.lv_user_infor);
		lv_setup.setAdapter(userInforAdapte);
		lv_setup.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1,
					int positon, long arg3) {
				addScenndView(arg1, positon);
			}
		});
		userQuit = (Button) viewFlipper
				.findViewById(R.id.btn_user_infor_send_finish);
		userQuit.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				user.setLogin(false);
				MyApplication.getinstance().setUser(user);
				aActivity.finish();
			}
		});
	}

	private void addScenndView(View view, int position) {
		String sValue = null;
		TextView value = (TextView) view
				.findViewById(R.id.tv_gradevin_infor_list_otheritem_num);
		sValue = value.getText().toString();
		switch (position) {
		case 1:
			textChanged(sValue, position);
			aActivity.setTitle("邮箱修改");
			break;
		case 2:
			textChanged(sValue, position);
			aActivity.setTitle("昵称修改");
			break;
		case 3:
			passwordChanger(view);
			aActivity.setTitle("密码修改");
			break;
		case 4:
			textChanged(sValue, position);
			aActivity.setTitle("地址修改");
			break;
		default:
			break;
		}
		frontTitle = aActivity.getActivityTitle();
	}

	/**
	 * 密码修改页面
	 */
	private void passwordChanger(View view) {
		LinearLayout llChangerPassword = (LinearLayout) inflater.inflate(
				R.layout.user_login_changer_password_layout, null);
		ed_old = (EditText) llChangerPassword
				.findViewById(R.id.gradevin_manager_old_ed);
		ed_new = (EditText) llChangerPassword
				.findViewById(R.id.gradevin_manager_new_ed);
		ed_checkNew = (EditText) llChangerPassword
				.findViewById(R.id.gradevin_manager_check_ed);
		btn_confirm = (Button) llChangerPassword
				.findViewById(R.id.gradevin_manager_comfirm_btn);
		btn_confirm.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				checkAndSendRequest();
			}
		});
		changeVp(1, llChangerPassword);
	}

	protected void checkAndSendRequest() {
		String oldWord = ed_old.getText().toString();
		String newWord = ed_new.getText().toString();
		String checkNew = ed_checkNew.getText().toString();
		if (oldWord == null | oldWord.equals("")) {
			ToastMessage("原始密码不能为空");
			return;
		}
		if (newWord == null | newWord.equals("")) {
			ToastMessage("请输入新密码");
			return;
		}
		if (checkNew == null | checkNew.equals("")) {
			ToastMessage("请输入确认密码");
			return;
		}
		if (!StringUtils.chackLenth(checkNew)
				|| !StringUtils.chackLenth(newWord)) {
			ToastMessage("密码长度不符合规则、应为6-20位！");
			return;
		}
		if (!StringUtils.isNumLet(checkNew) || !StringUtils.isNumLet(newWord)) {
			ToastMessage("密码格式不对！请只能为数字和字母！");
			return;
		}
		if (!checkNew.equals(newWord)) {
			ToastMessage("两次输入不一致！请确认后重试！");
			return;
		}
		if (checkNew.equals(oldWord)) {
			ToastMessage("新密码和老密码不能相同！");
			return;
		}
		resetPassword(oldWord, newWord);
	}

	/**
	 * 重新设置用户密码
	 * 
	 * @param oldWord
	 * 
	 * @param newWord
	 */
	private void resetPassword(String oldWord, String newWord) {
		Service.getInstance(aActivity).resetUserPassword(user.getUserNumber(),
				oldWord, newWord, new onResultListener() {

					@Override
					public void onResult(Result result) {
						if (result.getStatucCode() == 0) {
							try {
								ParserResult parserResult = JsonParser
										.parserVerifyCode(result.getJsonBody());
								int code = parserResult.getCode();
								if (code == 0) {
									Debug.Out("密码设置结果通过：" + code);
									handler.sendEmptyMessage(20);
								} else if (code == 1) {
									Debug.Out("用户密码不正确：" + code);
									handler.sendEmptyMessage(21);
								} else if (code == 2) {
									Debug.Out("用户不存在：" + code);
									handler.sendEmptyMessage(22);
								} else {
									Debug.Out("服务器异常：" + code);
									handler.sendEmptyMessage(98);
								}
							} catch (JSONException e) {
								Debug.Out("解析异常" + result);
								e.printStackTrace();
							}
						}
					}

					@Override
					public void onNetError(Result result) {
						Debug.Out("网络异常" + result);
						handler.sendEmptyMessage(99);
					}
				});
	}

	/**
	 * 昵称、手机、等相关修改页面
	 */
	private void textChanged(String str, final int positon) {
		newstr = str;
		LinearLayout llChangerStr = (LinearLayout) inflater.inflate(
				R.layout.user_login_changer_infro_layout, null);
		final EditText etv = (EditText) llChangerStr
				.findViewById(R.id.ed_user_login_changer_infro);
		etv.setText(str);
		Button bt = (Button) llChangerStr
				.findViewById(R.id.btn_user_login_changer_infro);
		bt.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				newstr = etv.getText().toString().trim();
				if (newstr != null || !newstr.equals("")) {
					if (checkString(newstr, positon)) {
						changerString(newstr, positon);
					} else {
						massageType(positon);
					}
				} else {
					ToastMessage("请输入信息");
				}
			}
		});
		changeVp(1, llChangerStr);
	}

	/**
	 * 修改用户信息的提示错误信息
	 * 
	 * @param positon
	 */
	protected void massageType(int positon) {
		switch (positon) {
		case 1:
			ToastMessage("邮箱格式错误");
			break;
		default:
			break;
		}
	}

	/**
	 * 检查新输入的字符串输入的正确性
	 * 
	 * @param newstr
	 *            新字符串
	 * @param positon
	 *            adapt点击的位置
	 * @return true:检查正确
	 */
	protected boolean checkString(String newstr, int positon) {
		boolean flag = false;
		switch (positon) {
		case 1:
			if (StringUtils.isMail(newstr)) {
				flag = true;
			}
			break;
		case 2:
			flag = true;
			break;
		case 4:
			flag = true;
			break;
		default:
			break;
		}
		return flag;
	}

	/**
	 * 
	 * @param newString
	 *            更改后的用户信息
	 * @param positon
	 *            更改的位置：1：邮箱，2：昵称,4：地址，(与接口直接需要转换0更新昵称，1更新手机号码，2更新邮箱地址，3更新地址)
	 */
	protected void changerString(String newString, final int positon) {
		int newPositon = -1;
		switch (positon) {
		case 1:
			newPositon = 2;
			break;
		case 2:
			newPositon = 0;
			break;
		case 4:
			newPositon = 3;
			break;
		default:
			break;
		}
		if (newPositon != -1) {
			Service.getInstance(aActivity).userUpdate(user.getUserID(),
					newPositon, newstr, new onResultListener() {
						Message msg = new Message();

						@Override
						public void onResult(Result result) {
							if (result.getStatucCode() == 0) {
								try {
									ParserResult parserResult = JsonParser
											.parserInfoUpdate(result
													.getJsonBody());
									int code = parserResult.getCode();
									if (code == 0) {
										Debug.Out("更新成功：" + code);
										msg.what = 10;
										msg.arg1 = positon;
										msg.obj = newstr;
										handler.sendMessage(msg);
									} else {
										Debug.Out("服务器错误" + result);
										handler.sendEmptyMessage(98);
									}
								} catch (JSONException e) {
									Debug.Out("解析异常");
									e.printStackTrace();
								}
							}
						}

						@Override
						public void onNetError(Result result) {
							Debug.Out("服务器异常" + result);
							handler.sendEmptyMessage(99);
						}
					});
		}

	}

	Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case 10:
				ToastMessage("更新成功");
				onKeyBack();
				break;
			case 20:
				ToastMessage("密码设置成功");
				onKeyBack();
				break;
			case 21:
				ToastMessage("用户原密码不正确");
				break;
			case 22:
				ToastMessage("用户不存在");
				break;
			case 30:
				ToastMessage("图片上传成功");
				updateUserImage(msg.obj.toString());
				break;
			case 31:
				ToastMessage("图片上传失败");
				break;
			case 98:
				ToastMessage("服务器异常");
				break;
			case 99:
				ToastMessage("网络异常");
				break;
			default:
				break;
			}
			if (msg.obj != null && msg.what == 10) {
				switch (msg.arg1) {
				case 1:
					user.setUserEmail(msg.obj.toString());
					userInforAdapte.notifyDataSetChanged();
					break;
				case 2:
					user.setUserName(msg.obj.toString());
					nickName.setText(user.getUserName());
					userInforAdapte.notifyDataSetChanged();
					break;
				case 4:
					user.setUserAddress(msg.obj.toString());
					userInforAdapte.notifyDataSetChanged();
				default:
					break;
				}
			}
		}
	};

	public void ToastMessage(String message) {
		ToastUtils.toastMessage(message);
	}

	protected void updateUserImage(String imageUrl) {
		if (userPic != null) {
			user.setUserImagerURL(imageUrl);
			MyApplication
					.getinstance()
					.getImageLoader()
					.loadImage(user.getUserImagerURL(),
							new SimpleImageLoadingListener() {

								@SuppressWarnings("deprecation")
								@Override
								public void onLoadingComplete(String arg0,
										View arg1, Bitmap arg2) {
									userPic.setBackground(new BitmapDrawable(
											arg2));
								}
							});
		}
	}

	/**
	 * 获取用户信息
	 * 
	 * @author lenovo
	 * 
	 */
	private void getUserinfor() {
		user = ((MyApplication) aActivity.getApplication()).getUser();
	}

	protected void UpdateDeviceImage() {
		// TODO Auto-generated method stub
		Intent innerIntent = new Intent(Intent.ACTION_GET_CONTENT);
		innerIntent.putExtra("crop", "true");
		innerIntent.putExtra("aspectX", 1);
		innerIntent.putExtra("aspectY", 1);
		innerIntent.setType("image/*");
		innerIntent.putExtra("outputX", 200);
		innerIntent.putExtra("outputY", 200);
		startActivityForResult(innerIntent, 200);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == Activity.RESULT_OK && requestCode == 200) {
			Bitmap bmap = data.getParcelableExtra("data");
			if (bmap != null) {
				requestForUpdateImage(bmap);
			}
		}
	}

	private void requestForUpdateImage(Bitmap bitmap) {
		Service.getInstance(aActivity).uploadUserImage(
				MyApplication.getinstance().getUser().getUserID(),
				BitmapUtils.Bitmap2Bytes(bitmap), new onResultListener() {
					@Override
					public void onResult(Result result) {
						ParserResult parserResult;
						try {
							parserResult = JsonParser.parserUploadImage(result
									.getJsonBody());
							int code = parserResult.getCode();
							if (code == 0) {
								Debug.Out("图片上传成功" + code);
								Message msg = new Message();
								msg.what = 30;
								msg.obj = parserResult.getObj().toString();
								handler.sendMessage(msg);
							} else {
								Debug.Out("图片上传失败" + code);
								handler.sendEmptyMessage(31);
							}
						} catch (JSONException e) {
							e.printStackTrace();
						}
					}

					@Override
					public void onNetError(Result result) {
						// TODO Auto-generated method stub
						Debug.Out(result.getErrorInfo());
						Debug.Out("网络异常" + result);
						handler.sendEmptyMessage(99);
					}
				});
	}

	/**
	 * vp切换
	 * 
	 * @param index
	 *            要添加view的index
	 * @param scendview
	 *            要添加的view
	 */
	private void changeVp(int index, View scendview) {
		// TODO Auto-generated method stub
		int count = viewFlipper.getChildCount();
		while (count > index) {
			// 把之前的view删除掉
			viewFlipper.removeViewAt(count - 1);
			count = viewFlipper.getChildCount();
		}
		viewFlipper.addView(scendview);
		showViewFillperNext();
	}

	/**
	 * 判断是否还有下一页
	 * */
	private boolean showViewFillperNext() {
		// TODO Auto-generated method stub
		if (currnetIndex < viewFlipper.getChildCount() - 1) {
			viewFlipper.clearAnimation();
//			viewFlipper.setInAnimation(aActivity, R.anim.in_right);
//			viewFlipper.setOutAnimation(aActivity, R.anim.out_left);
			viewFlipper.showNext();
			currnetIndex++;
			return true;
		}
		return false;
	}

	/**
	 * 判断是否还有上一页
	 * */
	private boolean showViewFillperPerious() {
		// TODO Auto-generated method stub
		if (currnetIndex > 0) {
			viewFlipper.clearAnimation();
//			viewFlipper.setInAnimation(aActivity, R.anim.in_left);
//			viewFlipper.setOutAnimation(aActivity, R.anim.out_right);
			viewFlipper.showPrevious();
			currnetIndex--;
			return true;
		}
		return false;
	}

	public boolean onKeyBack() {
		if (showViewFillperPerious()) {
			if (currnetIndex > 0) {
				aActivity.setTitle(frontTitle);
			} else {
				aActivity.setTitle(frontAndUpTitle);
			}
			return true;
		} else {
			return false;
		}
	}

}
